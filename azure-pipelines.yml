trigger:
- master

pool:
  vmImage: 'ubuntu-latest'
  demands:
  - npm
  
steps:
- task: DotNetCoreCLI@2
  displayName: 'Restore'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'select'
    vstsFeed: '27aae03a-27a6-477f-b1bb-0d4760ace431'
- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
# - task: DotNetCoreCLI@2
#   displayName: 'Install tools'
#   inputs:
#     command: custom
#     custom: tool
#     arguments: 'restore'  
# - task: DotNetCoreCLI@2
#   displayName: 'Unit tests'
#   inputs:
#     command: 'test'
#     arguments: '--configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
#     publishTestResults: true
#     projects: '**/*.Tests.csproj'
# - task: DotNetCoreCLI@2
#   displayName: 'Quality Assurance'
#   inputs:
#     command: custom
#     custom: tool
#     arguments: 'run reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines'
# - task: PublishCodeCoverageResults@1
#   displayName: 'Quality report'
#   inputs:
#     codeCoverageTool: 'cobertura'
#     summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
- task: Docker@2
  displayName: 'Dockering'
  inputs:
    containerRegistry: 'danieeelfrazuredevops|Azure Container Registry'
    repository: 'consumer-services'
    command: 'buildAndPush'
    Dockerfile: 'Dockerfile'
    tags: |
      $(Build.BuildId)
      latest