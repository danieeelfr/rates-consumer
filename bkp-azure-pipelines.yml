# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'
  demands:
  - npm
  

  

steps:
# - script: echo Starting Continuous Integration...
#   displayName: 'Init'

# - script: |
#     echo ....
#     echo ...
#   displayName: 'Run a multi-line script'
- task: DotNetCoreCLI@2
  displayName: 'Restoring'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'select'
    vstsFeed: '27aae03a-27a6-477f-b1bb-0d4760ace431'
- task: DotNetCoreCLI@2
  displayName: 'Building'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
- task: DotNetCoreCLI@2
  displayName: 'Installing tools'
  inputs:
    command: custom
    custom: tool
    arguments: 'restore'  
- task: DotNetCoreCLI@2
  displayName: 'Testing units'
  inputs:
    command: 'test'
    arguments: '--configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
    publishTestResults: true
    projects: '**/*.Tests.csproj'
- task: DotNetCoreCLI@2
  displayName: 'Quality Assurance'
  inputs:
    command: custom
    custom: tool
    arguments: 'run reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines'
- task: PublishCodeCoverageResults@1
  displayName: 'Building Quality report'
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
- task: Docker@2
  displayName: 'Dockering'
  inputs:
    containerRegistry: 'danieeelfrazuredevops|Azure Container Registry'
    repository: 'danielfr-softplan-rate-services-api'
    command: 'buildAndPush'
    Dockerfile: 'Dockerfile'
    tags: |
      $(Build.BuildId)
      latest